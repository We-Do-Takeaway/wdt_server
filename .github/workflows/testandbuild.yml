name: Test and Build

on:
  push:
    branches: [main]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Flake8
        run: poetry run flake8

      - name: Black code format
        run: poetry run black . --check

  test:
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: wdt
          POSTGRES_PASSWORD: password
          POSTGRES_USER: wdt
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SECRET_KEY: secret
      DATABASE_URL: postgres://wdt:password@localhost:5432/wdt
      DEBUG: True

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install Poetry
      uses: snok/install-poetry@v1.1.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: false
        virtualenvs-path: ~/.virtualenvs

    - name: Cache Poetry virtualenv
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.virtualenvs
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      run: poetry install --no-interaction --no-root
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Run migrations
      run: poetry run python manage.py migrate

    - name: Tests
      run: poetry run pytest --cov --junit-xml=test-output/test-output.xml --cov-report xml:test-output/coverage.xml
      env:
        DJANGO_SETTINGS_MODULE: wdt.settings

    - name: Upload test output
      uses: actions/upload-artifact@master
      with:
        name: test-output
        path: test-output/test-output.xml

    - name: Upload coverage
      uses: actions/upload-artifact@master
      with:
        name: coverage
        path: test-output/coverage.xml

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: test-output/**/test-output.xml

  sonar-cloud:
    name: Sonar Cloud
    runs-on: ubuntu-20.04
    needs: test

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download test output
      uses: actions/download-artifact@master
      with:
        name: test-output
        path: test-output

    - name: Download coverage
      uses: actions/download-artifact@master
      with:
        name: coverage
        path: test-output

    - name: Fix code coverage paths
      working-directory: ./test-output
      run: |
        sed -i 's/\/home\/runner\/work\/wdt_server\/wdt_server\//\/github\/workspace\//g' coverage.xml

    - name: Fix code coverage paths
      working-directory: ./test-output
      run: |
        sed -i 's/\/home\/runner\/work\/wdt_server\/wdt_server\//\/github\/workspace\//g' coverage.xml

    - name: Analyze with SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.organization=we-do-takeaway
          -Dsonar.projectKey=We-Do-Takeaway_wdt_server
          -Dsonar.language=py
          -Dsonar.python.coverage.reportPaths=test-output/coverage.xml
          -Dsonar.python.coveragePlugin=coverage
          -Dsonar.python.xunit.reportPath=test-output/test-output.xml
          -Dsonar.sources=wdt
